name: Auto Tag

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"

permissions: write-all

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          cancel_others: "true"
          concurrent_skipping: "same_content"

  auto-tag:
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.get_latest_tag.outputs.version }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/git
          key: ${{ runner.os }}-git-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-git-

      - name: Get latest tag
        id: get_latest_tag
        run: |
          set -euo pipefail
          git fetch --tags --force || {
            echo "::error::Failed to fetch tags"
            exit 1
          }
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            new_version="v0.1.0"
          else
            major=$(echo $latest_tag | cut -d. -f1)
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          fi
          echo "version=$new_version" >> "$GITHUB_OUTPUT"
          echo "Generated version: $new_version"

      - name: Validate version
        run: |
          set -euo pipefail
          new_tag="${{ steps.get_latest_tag.outputs.version }}"
          echo "Validating version: $new_tag"
          if [[ ! $new_tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $new_tag"
            exit 1
          fi
          major=$(echo $new_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $new_tag | cut -d. -f2)
          patch=$(echo $new_tag | cut -d. -f3)
          if [[ $major -gt 99 || $minor -gt 99 || $patch -gt 999 ]]; then
            echo "::error::Version numbers out of valid range"
            exit 1
          fi
          echo "Version validation passed"

      - name: Create new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag=${{ steps.get_latest_tag.outputs.version }}
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a $new_tag -m "Release $new_tag"
          git push origin $new_tag

      - name: Debug output
        run: |
          echo "Step outputs:"
          echo "  version: ${{ steps.get_latest_tag.outputs.version }}"
          echo "Job outputs:"
          echo "  all: ${{ toJSON(job.outputs) }}"
          echo "  direct: ${{ job.outputs.version }}"
          echo "Needs outputs:"
          echo "  all: ${{ toJSON(needs) }}"
          echo "::debug::Raw version value: ${{ steps.get_latest_tag.outputs.version }}"

      - name: Verify outputs
        run: |
          echo "GITHUB_OUTPUT contents:"
          cat $GITHUB_OUTPUT
          echo "---"
          echo "Direct version value: ${{ steps.get_latest_tag.outputs.version }}"

      - name: Debug Release Trigger
        run: |
          echo "Auto-tag completed successfully"
          echo "Version to be released: ${{ steps.get_latest_tag.outputs.version }}"
          echo "Checking release conditions:"
          echo "  - Version not empty: ${{ steps.get_latest_tag.outputs.version != '' }}"
          echo "  - Current job status: ${{ job.status }}"

      - name: Check workflow status
        if: always()
        run: |
          if [[ "${{ job.status }}" == "failure" ]]; then
            echo "::error::Auto-tag workflow failed"
            exit 1
          fi

  release:
    needs: auto-tag
    permissions:
      contents: write
      packages: write
      actions: write
    if: |
      needs.auto-tag.result == 'success' &&
      needs.auto-tag.outputs.version != ''
    uses: ./.github/workflows/release.yml
    with:
      version: ${{ needs.auto-tag.outputs.version }}
    secrets:
      RELEASE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      PASSPHRASE: ${{ secrets.PASSPHRASE }}
