name: Auto Tag & Release

on:
  push:
    branches:
      - master
      - main
    tags:
      - "v*"
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          cancel_others: "true"
          concurrent_skipping: "same_content"

  auto-tag-release:
    needs: pre_job
    if: |
      needs.pre_job.outputs.should_skip != 'true' ||
      startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.get_latest_tag.outputs.version }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          check-latest: true
          cache: true

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/.cache/git
          key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # 只在非tag推送时执行自动打tag
      - name: Get latest tag
        if: "!startsWith(github.ref, 'refs/tags/v')"
        id: get_latest_tag
        run: |
          set -euo pipefail
          git fetch --tags --force || {
            echo "::error::Failed to fetch tags"
            exit 1
          }
          latest_tag=$(git tag -l 'v*' --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            new_version="v0.1.0"
          else
            major=$(echo $latest_tag | cut -d. -f1)
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_patch=$((patch + 1))
            new_version="$major.$minor.$new_patch"
          fi
          echo "version=$new_version" >> "$GITHUB_OUTPUT"
          echo "Generated version: $new_version"

      - name: Validate version
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: |
          set -euo pipefail
          new_tag="${{ steps.get_latest_tag.outputs.version }}"
          echo "Validating version: $new_tag"
          if [[ ! $new_tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $new_tag"
            exit 1
          fi
          major=$(echo $new_tag | cut -d. -f1 | tr -d 'v')
          minor=$(echo $new_tag | cut -d. -f2)
          patch=$(echo $new_tag | cut -d. -f3)
          if [[ $major -gt 99 || $minor -gt 99 || $patch -gt 999 ]]; then
            echo "::error::Version numbers out of valid range"
            exit 1
          fi
          echo "Version validation passed"

      - name: Create new tag
        if: "!startsWith(github.ref, 'refs/tags/v')"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag=${{ steps.get_latest_tag.outputs.version }}
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a $new_tag -m "Release $new_tag"
          git push origin $new_tag

      # Release 相关步骤
      - name: Import GPG key
        id: import_gpg
        if: |
          startsWith(github.ref, 'refs/tags/v') || 
          (success() && steps.get_latest_tag.outputs.version != '')
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Run GoReleaser
        if: |
          startsWith(github.ref, 'refs/tags/v') || 
          (success() && steps.get_latest_tag.outputs.version != '')
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --timeout 60m
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          VERSION: ${{ steps.get_latest_tag.outputs.version }}

      - name: Set Release Version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Verify Release
        if: |
          startsWith(github.ref, 'refs/tags/v') || 
          (success() && steps.get_latest_tag.outputs.version != '')
        run: |
          echo "Verifying release artifacts..."
          if [ ! -d "dist" ]; then
            echo "::error::Release artifacts not found"
            exit 1
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Release process failed"
